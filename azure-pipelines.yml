trigger:
  batch: true
  branches:
    include:
      - master
      - feature/*
  paths:
    include:
      - '/terraform'
variables:
- name: state.key
  value: 'TFSTATE'
- name: terraform.path
  value: 'terraform'
- name: terraform.version
  value: 2.0

stages:
- stage: deploy_stage
  displayName: 'Deploy Stage'
  jobs:
  - job:
  steps:
  - checkout: self
  clean: true
  persistCredentials: true
    - task: JamiePhillips.Terraform.TerraformTool.TerraformTool@0
      displayName: 'Use Terraform $(terraform.version)'
      inputs:
        version: '$(terraform.version)'

    displayName: 'AZ Login and Set ACCESS_KEY'
    - script: |
      az login --service-principal -u $(SPN-ID) -p $(SPN-SECRET) --tenant $(TENANT-ID)
      ACCESS_KEY=`az storage account keys list -n $(STORAGE_ACCOUNT) -o json | jq -r '.[0].value'`
      echo "##vso[task.setvariable variable=ACCESS_KEY]$ACCESS_KEY"
      
    workingDirectory: '$(terraform.path)'
    displayName: 'Create terraform.tfvars'
    - script: |
      cat << EOT >> terraform.tfvars
      access_key = "$(ACCESS_KEY)"
      tenant_id = "$(TENANT-ID)"
      subscription_id = "$(SUBSCRIPTION-ID)"
      client_id = "$(SPN-ID)"
      client_secret = "$(SPN-SECRET)"
      EOT

    displayName: 'Terraform Validate'
    workingDirectory: '$(terraform.path)'
    - script: |
      terraform validate -check-variables=false

    displayName: 'Terraform Plan'
    workingDirectory: '$(terraform.path)'
    - script: |
      terraform init -backend-config=resource_group_name=$(RESOURCE_GROUP) -backend-config=storage_account_name=$(STORAGE_ACCOUNT) -backend-config=container_name=tf-statefiles -backend-config=key=$(state.key) -backend-config=access_key=$(ACCESS_KEY) -no-color -input=false
      terraform plan -out=tfplan -no-color -input=false
      
    displayName: 'Terraform Apply'
    workingDirectory: '$(terraform.path)'
    - script: |
      terraform apply -auto-approve
