trigger:
  branches:
    include:
      - master
      - feature/*

variables:
- name: serviceConnection
  value: 'Azure CXP FTA Internal Subscription CBELLEE (b2375b5f-8dab-4436-b87c-32bc7fdce5d0)'
- name: aksClusterName
  value: 'k8s-demo-2' 
- name: containerName
  value: 'tf-statefiles'
- name: resourceGroupName
  value: 'k8s-demo-2-rg'
- name: state.key
  value: 'TFSTATE'
- name: terraform.path
  value: 'terraform'
- name: terraform.version
  value: 0.12.21

stages:
- stage: 'resource_deployment_stage'
  displayName: 'AKS environment deployment'
  jobs:
    - job: 'resource_deployment_job'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: JamiePhillips.Terraform.TerraformTool.TerraformTool@0
          displayName: 'Use Terraform $(terraform.version)'
          inputs:
            version: '$(terraform.version)'
        
        - script: |
            az login --service-principal -u $(SPN-ID) -p $(SPN-SECRET) --tenant $(TENANT-ID)
            ACCESS_KEY=`az storage account keys list -n $(STORAGE-ACCOUNT) -o json | jq -r '.[0].value'`
            echo "##vso[task.setvariable variable=ACCESS_KEY]$ACCESS_KEY"
          displayName: 'Login & get storage account access key'
          workingDirectory: '$(terraform.path)'

        - script: |
            cat << EOT >> terraform.tfvars
            access_key = "$(ACCESS_KEY)"
            tenant_id = "$(TENANT-ID)"
            subscription_id = "$(SUBSCRIPTION-ID)"
            client_id = "$(SPN-ID)"
            client_secret = "$(SPN-SECRET)"
            EOT
          displayName: 'Terraform create tfvars file'
          workingDirectory: '$(terraform.path)'

        - script: |
            terraform init -backend-config=resource_group_name=$(resourceGroupName) -backend-config=storage_account_name=$(STORAGE-ACCOUNT) -backend-config=container_name=$(containerName) -backend-config=key=$(state.key) -backend-config=access_key=$(ACCESS_KEY) -no-color -input=false
          displayName: 'Terraform Init'
          workingDirectory: '$(terraform.path)'

        - script: | 
            terraform validate $(terraform.path)
            displayName: 'Terraform Validate'
          workingDirectory: '$(terraform.path)'
          enabled: false

        - script: |
            terraform plan -out=tfplan -no-color -input=false -var-file=terraform.tfvars
          displayName: 'Terraform Plan'
          workingDirectory: '$(terraform.path)'

        - script: |
            terraform apply -auto-approve
            echo "$(terraform output kube_config)" > ./azurek8s
            export KUBECONFIG=./azurek8s
          displayName: 'Terraform Apply'
          workingDirectory: '$(terraform.path)'
            
        - task: HelmInstaller@1
          displayName: 'Install Helm'
          inputs:
            helmVersionToInstall: 'latest'
            
        - script: |
            helm repo add fluxcd https://charts.fluxcd.io
            kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/master/deploy/crds.yaml

            kubectl apply -f ./namespaces/flux-namespace.yaml

            helm upgrade -i flux fluxcd/flux --wait \
            --namespace fluxcd \
            --set git.url=git@github.com:cbellee/colourserver-flux-cd \
            --set git.path="clusters/dev" \
            --set git.label=dev \
            --set additionalArgs={--sync-garbage-collection} \
            --set git-poll-interval=1m \
            --set sync-interval=1m \
            --set sync-timeout=30s

            helm upgrade -i helm-operator fluxcd/helm-operator --wait \
            --namespace fluxcd \
            --set git.ssh.secretName=flux-git-deploy \
            --set helm.versions=v3

            export FLUX_FORWARD_NAMESPACE=fluxcd

            fluxctl identity

            helm install demo-nginx-ingress stable/nginx-ingress
          displayName: 'Install Flux & Helm Operator'
          workingDirectory: '$(terraform.path)'

        - task: Bash@3 
          displayName: 'Install Flux & Helm Operator'
          enabled: false
          inputs:
            filePath: ./scripts/1-install-flux-helm-operators.sh
            targetType: filePath
            workingDirectory: '$(terraform.path)'

        - task: Bash@3 
          displayName: 'Install Ingress Controller'
          enabled: false
          inputs:
            filePath: ./scripts/2-install-ingress-controller.sh
            targetType: filePath
            workingDirectory: '$(terraform.path)'

        - script: |
            terraform destroy
          displayName: 'Terraform Destroy'
          workingDirectory: '$(terraform.path)'
          enabled: false
