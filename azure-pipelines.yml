trigger:
  branches:
    include:
      - master
      - feature/*

variables:
- name: containerName
  value: 'tf-statefiles'
- name: resourceGroupName
  value: 'colourserver-aks-rg'
- name: state.key
  value: 'TFSTATE'
- name: terraform.path
  value: 'terraform'
- name: terraform.version
  value: 0.12.21

stages:
- stage: 'resource_deployment_stage'
  displayName: 'AKS environment deployment'
  jobs:
    - job: 'resource_deployment_job'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: JamiePhillips.Terraform.TerraformTool.TerraformTool@0
          displayName: 'Use Terraform $(terraform.version)'
          inputs:
            version: '$(terraform.version)'
        
        - script: |
            az login --service-principal -u $(SPN-ID) -p $(SPN-SECRET) --tenant $(TENANT-ID)
            ACCESS_KEY=`az storage account keys list -n $(STORAGE-ACCOUNT) -o json | jq -r '.[0].value'`
            echo "##vso[task.setvariable variable=ACCESS_KEY]$ACCESS_KEY"
          displayName: 'Login & get storage account access key'
          workingDirectory: '$(terraform.path)'

        - script: |
            cat << EOT >> terraform.tfvars
            access_key = "$(ACCESS_KEY)"
            tenant_id = "$(TENANT-ID)"
            subscription_id = "$(SUBSCRIPTION-ID)"
            client_id = "$(SPN-ID)"
            client_secret = "$(SPN-SECRET)"
            EOT
          displayName: 'Terraform create tfvars file'
          workingDirectory: '$(terraform.path)'

        - script: |
            terraform init -backend-config=resource_group_name=$(resourceGroupName) -backend-config=storage_account_name=$(STORAGE-ACCOUNT) -backend-config=container_name=$(containerName) -backend-config=key=$(state.key) -backend-config=access_key=$(ACCESS_KEY) -no-color -input=false
          displayName: 'Terraform Init'
          workingDirectory: '$(terraform.path)'

        - script: | 
            TF_ACC=true terraform validate $(terraform.path)
            displayName: 'Terraform Validate'
          workingDirectory: '$(terraform.path)'
          enabled: false

        - script: |
            TF_ACC=true terraform plan -out=tfplan -no-color -input=false -var-file=terraform.tfvars
          displayName: 'Terraform Plan'
          workingDirectory: '$(terraform.path)'

        - script: |
            TF_ACC=true terraform apply -auto-approve
          displayName: 'Terraform Apply'
          workingDirectory: '$(terraform.path)'

        - script: |
            TF_ACC=true terraform destroy
          displayName: 'Terraform Destroy'
          workingDirectory: '$(terraform.path)'
