# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  vm-image-name: 'ubuntu-latest'

jobs:
- deployment: Terraform_Plan_Apply
  displayName: 'Terraform Infra Build'
  pool:
    vmImage: $(vm-image-name)
  environment: 'dev'
  strategy:
    runOnce:
      deploy:
        steps:
          - task: Terraform@2
            displayName: 'Terraform init && plan'
            inputs:
              TemplatePath: './terraform'
              Arguments: 'plan'
              PlanPath: './terraform/k8s.tf'
              InstallTerraform: true
              UseAzureSub: true
              ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
              ConnectedServiceNameARM: 'Azure CXP FTA Internal Subscription CBELLEE (b2375b5f-8dab-4436-b87c-32bc7fdce5d0)'
              ManageState: true
              SpecifyStorageAccount: true
              StorageAccountResourceGroup: 'terraform-rg'
              StorageAccountRM: 'stortf38f883'
              StorageContainerName: 'tfstate'

          - task: Terraform@2
            displayName: 'Terraform apply -auto-approve'
            inputs:
              TemplatePath: './terraform'
              Arguments: 'apply -auto-approve'
              UseAzureSub: true
              ConnectedServiceNameSelector: 'ConnectedServiceNameARM'
              ConnectedServiceNameARM: 'Azure CXP FTA Internal Subscription CBELLEE (b2375b5f-8dab-4436-b87c-32bc7fdce5d0)'
              ManageState: true
              SpecifyStorageAccount: true
              StorageAccountResourceGroup: 'terraform-rg'
              StorageAccountRM: 'stortf38f883'
              StorageContainerName: 'tfstate' 

